{ (c) 1994-1999 Phil Hetherington, P&M Research Technologies, Inc.}
{ (c) 2000-2003 Tim Blanche, University of British Columbia }
unit SurfPublicTypes;
INTERFACE
USES Windows, Graphics, Messages;
CONST
   MAXCLUSTERS = 32;
   clOrange = $000080FF;
   clTan = $0000B3FF;
   clLtOlive = $004AADB5;

   COLORTABLE : array[-2..9] of TColor = ({-2}clDkGray, {-1}clWhite,
       {0}clRed,{1}clLime,{2}clAqua,{3}clYellow,{4}clFuchsia,{5}clOrange,{6}clTan,{7}clLtOlive, {8}clTeal, {8}clPurple(*,
       {9}clRed,{10}clLime,{11}clAqua,{12}clYellow,{13}clFuchsia,{14}clOrange,{15}clTan,{16}clLtOlive,
       {17}clRed,{18}clLime,{19}clAqua,{20}clYellow,{21}clFuchsia,{22}clOrange,{23}clTan,{24}clLtOlive,
       {25}clRed,{26}clLime,{26}clAqua,{28}clYellow,{29}clFuchsia,{30}clOrange,{31}clTan,{32}clLtOlive*));

   STIMULUSTYPE : array [0..16] of string = ('undefined', 'sine wave grating'{1}, 'square wave grating'{2}, 'vernier bars'{3},
        'spiral grating'{4}, 'gabor patches'{5}, 'noise grating'{6}, 'jitter grating'{7}, 'Snellen letter chart'{8},
        'Frisen perimetry'{9}, 'bars'{10}, 'sparse noise'{11}, 'flashed bar'{12}, 'm-sequence'{13},
        'bar segments'{14}, 'image sequence'{15}, 'movie'{16});


CONST
   SURF_PT_REC_UFFTYPE      = 'P'; //Polytrode records for spike, continuous spike & continuous recordings
     SPIKEEPOCH             = 'E'; //was 'P', original SURF type, changed from 'S' to 'E' June 2002 tjb
     SPIKESTREAM            = 'S'; //continuous stream to disk
     CONTINUOUS             = 'C'; //all other, non-spike continuous records (eg. EEG)
   SURF_SV_REC_UFFTYPE      = 'V'; //Single value record...
     SURF_DIGITAL           = 'D'; //...from the digital ports
     SURF_ANALOG            = 'A'; //...from an analog channel
   SURF_PL_REC_UFFTYPE      = 'L'; //Polytrode layout record
   SURF_MSG_REC_UFFTYPE     = 'M'; //Message record...
     USER_MESSAGE           = 'U'; //...generated by user
     SURF_MESSAGE           = 'S'; //...generated by Surf
   SURF_DSP_REC_UFFTYPE     = 'D'; //Stimulus display parameter header record

   SURF_MAX_PROBES          = 32;
   SURF_MAX_PARAMS          = 32;
   SURF_MAX_WAVEFORM_PTS    = 1024;
   SURF_SPLINE_RES          = 4; //provides 10µs resolution (interpolated) with 25K (raw) sampling rate

   RESOLUTION_8_BIT         = 256;
   RESOLUTION_12_BIT        = 4096;
   RESOLUTION_16_BIT        = 65536;
   RESOLUTION_24_BIT        = 16777216;
   RESOLUTION_32_BIT        = 4294967296;

   DT3010_MAX_SE_CHANS      = 32;
   SURF_MAX_CHANNELS        = 64; //currently supports one or two DT3010 boards, could be higher

   ADC_SATURATED_LOW        = $000;
   ADC_SATURATED_HIGH       = $FFF;

   NVS_PARAM_LEN            = 749;
   PYTHON_TBL_LEN           = 50000;

TYPE
{ Surf uses a format similar to DW's uff data file structure.  The major difference is the
  absence of most of the records, and the unification of all spike and continuous records into
  one called the POLYTRODE record.  The POLYTRODE record can have 2 subtypes, the SPIKETYPE and
  the CONTINUOUSTYPE.  Both can have any length waveform.  The SPIKETYPE can have any number of
  channels, but the CONTINUOUSTYPE can have only one channel. In addition there are singlevalue
  records, for the storage of single 2B words, and mesg records, for the storage of 256B ShortStrings}

{ June 2002: to accommodate continuous spike acquisition, a third POLYTRODE record subtype has been
  introduced, SPIKESTREAM. The SPIKETYPE = 'S' constant has been changed to SPIKEEPOCH = 'E', and
  relevant SURF units have been updated to reflect this change.  SPIKESTREAM, like SPIKEEPOCH, can
  have any number of channels, but lacks a waveform length, threshold etc. as data is continously
  sampled.  Unlike CONTINUOUSTYPE, it can have more than one channel and associated probe win layout,
  but does not allow sampling decimation (skippts)}

  TPoint = record  //graphics
    x,y : integer;
  end;

  SHRT   = SmallInt;{2 bytes} // short (from DTxPascal.pas)
  LNG    = LongInt;{4 bytes}  // long  (from DTxPascal.pas)

  TWaveform = array of SHRT {even though DT3010 samples are unsigned (binary offset), since they're only 12bits wide
                             it is acceptable to cast TWaveform samples as signed 16 bit words for flexibility };
  TWaveformArray = array of TWaveform;
  PWaveform = ^TWaveForm;

  TProbeWinLayout = record
    left,top,width,height : integer;
  end;
  TChanList = array[0..SURF_MAX_CHANNELS-1] of SHRT;

  TSites     = set of 0..SURF_MAX_CHANNELS-1;
  TSiteArray = array [0..SURF_MAX_CHANNELS-1] of TSites;

  //SPIKE DATA ANALYSIS RECORDS-----------------------------
  TSpike = record
    Time_stamp    : INT64;{Cardinal, 32bit unsigned int}
    Cluster       : SHRT;{2 bytes}
    EventNum      : Integer;{4 bytes}
    Waveform      : array{nchans}of TWaveform;
    Param         : array{nchans}of array{nparams}of SHRT; //'of array' added 15/7/01
  end;
  TSpikeArray = array of TSpike;

  TClusteredSpike = record
    TimeStamp  : int64;
    ClusterID  : integer;
  end;
  TClusteredSpikeArray = array of TClusteredSpike;

  TClusterCentroid = array of single;
  TCluster = record
    n            : integer;
    lastn, lastt : integer; //number of spike samples at last ISOCLUS...
    Full, Good   : boolean; //... iteration / time since lastn changed
    Members      : array of integer;
    Centroid     : TClusterCentroid;
    Distortion   : single;
  end;
  TClusterArray = array of TCluster;

  TSpikeTemplate = record
    Sites : TSites; //list of channels in this template
    NumSites, PtsPerChan : integer; //number of sites and wavpts/site in this template
    SiteOrigin : array of TPoint; //contains the subset of SiteLoc[n] for plotting
    PlotBounds : TRect; //plotting boundary for this template
    MaxChan    : integer; //site with the largest amplitude spike
    n          : integer; //number of single trials making up the template
    Locked, Enabled : boolean; //locked = no adding to template; enabled = included in search
    AvgWaveform : TWaveform; //contiguous channel-channel avg. waveform template
    SumWaveform : array of double; //for computing running statistics...
    SSqWaveform : array of double;
    StdWaveform : array of double;
    Members     : array of integer; //sorted cluster ids --> index into original SpikeSet
    SpikeTimes  : array of int64;
    FitThreshold : cardinal; //lsqr error must be below this value for event to belong to this template
    { the following two fields are not saved to the .tem files }
    ChartIndexArray  : array of integer; //stores spk event to buff # indexes for chartwin display
    WavStart, WavEnd : array of integer; //delineates each channel's waveform to optimise fitting
  end;

  //CONTINUOUS RECORD ANALYSIS RECORD----------------------
  TCR = record
    time_stamp    : INT64;{64bit signed int}
    EventNum      : Integer;{4 bytes}
    Waveform      : TWaveform;
  end;
  TCRArray = array of TCR;


  TProbe = record
    ProbeSubType   : CHAR; {=E,S,C for spike epoch, continuous spike or other continuous }
    numchans       : SHRT; //number of channels in this spike waveform
    pts_per_chan   : SHRT; //number of pts per waveform
    pts_per_buffer : LNG;  //total number of samples per file buffer for this probe (redundant with SS_REC.NumSamples)
    trigpt         : SHRT; //pts before trigger
    lockout        : SHRT; //lockout in pts
    intgain        : SHRT; //A/D board internal gain
    threshold      : SHRT; //A/D board threshold for trigger
    skippts        : SHRT; //for decimating (eg. 2 = 1/2 base sampling frequency)
    sampfreqperchan: LNG;  //A/D sampling frequency
    sh_delay_offset: SHRT;
    chanlist       : TChanList;//= array[0..SURF_MAX_CHANNELS-1] of SHRT;
    ProbeWinLayout : TProbeWinLayout;//= array[0..SURF_MAX_CHANNELS-1] of TPoint;
    probe_descrip  : ShortString;
    electrode_name : ShortString;//new
    numparams      : LNG;
    paramname      : array{numparams}of string[SURF_MAX_PARAMS];
    numspikes      : LNG;
    numcr          : LNG;
    Spike          : TSpikeArray;
    CR             : TCrArray;
    ExtGain        : array[0..SURF_MAX_CHANNELS-1] of WORD;//added May21'99
  end;
  TProbeArray = array of TProbe;


  //SVAL ACQUISITION RECORD-----------------------------
  TSVal = record
    time_stamp    : INT64;//64bit signed int
    subtype       : CHAR; //1 byte -- can be used for different values
    EventNum      : LNG;  //4 bytes
    sval          : WORD; //2 bytes -- 16 bit unsigned value
  end;
  TSValArray = array of TSVal;

  //Stimulus display header record ---------------------
  TStimulusHeader = {packed}record
    header        : array[0..1] of char;
    version       : word;
    filename      : array[0..19] of char;
    parameter_tbl : array[0..NVS_PARAM_LEN - 1]  of single;
    python_tbl    : array[0..PYTHON_TBL_LEN - 1] of char;  //added by MAS
    screen_width  : single;
    screen_height : single;
    view_distance : single;
    frame_rate    : single;
    gamma_correct : single;
    gamma_offset  : single;
    est_runtime   : word;
    checksum      : word;
  end;
  TStimulusHeaderArray = array of TStimulusHeader;
  PStimulusHeader = ^TStimulusHeader;

  //DAC ACQUISITION RECORD-----------------------------
  TDAC = record  //Digital Analog Conversion
    channel    : Byte;//1 or 2
    frequency  : smallint;//if zero, the signal will be dc at the voltage
    voltage    : Single;// +/- 10V
  end;

  //DIO ACQUISITION RECORD-----------------------------
  TDIO = record  //For Digital Output
    //mask    : WORD;//i.e., $0000FFFF for port 1 only, $FFFF0000 for port 0 only
    val     : WORD;//2 bytes -- 16 bit unsigned value, e.g., $00FF00FF
  end;

  //Message record-------------------------------------------
  TSurfMsg = record
    TimeStamp  : INT64; //64 bit signed int
    EventNum   : LNG;{4 bytes}
    DateTime   : TDateTime; //double, 8 bytes
    Msg        : string{shortstring}; //any length message
  end;
  TSurfMsgArray = array of TSurfMsg;

  TStim = record
    posx,posy,len,wid,sfreq,contrast : SHRT;
  end;

  TStimulus = record
    timediv : double;
    time : array of TStim;
  end;

  TSurfEvent = record
    Time_Stamp    : INT64;//64bit signed int
    EventType     : CHAR;//e.g., POLYTRODE, SINGLE VALUE, MESSAGE...
    SubType       : CHAR;//e.g., S,C for spike or continuous
    Probe         : SHRT;//if used, the probe number
    Index         : LNG;//the index into the data array-- e.g., prb[probe].spike[index]....
  end;
  TSurfEventArray = array of TSurfEvent;

  TSurfFileInfo = record
    NEvents        : Integer;
    FileName       : String;
    SurfEventArray : TSurfEventArray;
    ProbeArray     : TProbeArray;
    SValArray      : TSValArray;
    SurfMsgArray   : TSurfMsgArray;
  end;
IMPLEMENTATION
END.
