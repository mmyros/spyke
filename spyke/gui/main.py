"""Main spyke interface window"""

import wx
import wx.html
import cPickle
import os

import wxglade_gui
import spyke.surf

class SpykeFrame(wxglade_gui.SpykeFrame):
    """spyke's main frame, inherits gui layout code auto-generated by wxGlade"""

    DEFAULTDIR = '/data'

    def __init__(self, *args, **kwargs):
        self.srffname = ""
        self.sortfname = ""
        wxglade_gui.SpykeFrame.__init__(self, *args, **kwargs)

    def OnNew(self, event):
        # TODO: what should actually go here? just check if an existing collection exists,
        # check if it's saved (if not, prompt to save), and then del it and init a new one?
        pass

    def OnOpen(self, event):
        dlg = wx.FileDialog(self, message="Open surf or sort file",
                            defaultDir=self.DEFAULTDIR, defaultFile='',
                            wildcard="All files (*.*)|*.*|Surf files (*.srf)|*.srf|Sort files (*.sort)|*.sort",
                            style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            fname = dlg.GetPath()
            self.OpenFile(fname)
        dlg.Destroy()

    def OnSave(self, event):
        if not self.sortfname:
            self.OnSaveAs(event)
        else:
            self.SaveFile(self.sortfname) # save to existing sort fname

    def OnSaveAs(self, event):
        """Save collection to new .sort file"""
        dlg = wx.FileDialog(self, message="Save collection as",
                            defaultDir=self.DEFAULTDIR, defaultFile='',
                            wildcard="Sort files (*.sort)|*.sort|All files (*.*)|*.*",
                            style=wx.SAVE | wx.OVERWRITE_PROMPT)
        if dlg.ShowModal() == wx.ID_OK:
            fname = dlg.GetPath()
            self.SaveFile(fname)
        dlg.Destroy()

    def OnExit(self, event):
        # TODO: add confirmation dialog if collection not saved
        try:
            self.surff.close()
        except AttributeError:
            pass
        self.Destroy()

    def OnAbout(self, event):
        dlg = SpykeAbout(self)
        dlg.ShowModal()
        dlg.Destroy()

    def OpenFile(self, fname):
        """Open either .srf or .sort file"""
        ext = os.path.splitext(fname)[1]
        if ext == '.srf':
            self.OpenSurfFile(fname)
        elif ext == '.sort':
            self.OpenSortFile(fname)
        else:
            wx.MessageBox("%s is not a .srf or .sort file" % fname,
                          caption="Error", style=wx.OK|wx.ICON_EXCLAMATION)
            return

    def OpenSurfFile(self, fname):
        # TODO: parse the .srf file
        self.surff = spyke.surf.File(fname)
        # TODO: parsing progress dialog
        self.surff.parse()
        self.srffname = fname # bind it now that it's been successfully opened and parsed
        self.SetTitle(self.Title + ' - ' + self.srffname)

    def OpenSortFile(self, fname):
        # TODO: do something with data (data is the collection object????)
        try:
            f = file(fname, 'rb')
            data = cPickle.load(f)
            f.close()
            self.sortfname = fname # bind it now that it's been successfully loaded
            self.SetTitle(self.Title + ' - ' + self.sortfname)
        except cPickle.UnpicklingError:
            wx.MessageBox("Couldn't open %s as a sort file" % fname,
                          caption="Error", style=wx.OK|wx.ICON_EXCLAMATION)

    def SaveFile(self, fname):
        """Save collection to existing .sort file"""
        if not os.path.splitext(fname)[1]:
            fname = fname + '.sort'
        f = file(fname, 'wb')
        cPickle.dump(self.collection, f)
        f.close()
        self.sortfname = fname # bind it now that it's been successfully saved
        self.SetTitle(self.Title + ' - ' + self.sortfname)


class SpykeAbout(wx.Dialog):
    text = '''
        <html>
        <body bgcolor="#ACAA60">
        <center><table bgcolor="#455481" width="100%" cellspacing="0"
        cellpadding="0" border="1">
        <tr>
            <td align="center"><h1>spyke</h1></td>
        </tr>
        </table>
        </center>
        <p><b>spyke</b> is a tool for neuronal spike sorting.
        </p>

        <p>Copyright &copy; 2008 Reza Lotun, Martin Spacek</p>
        </body>
        </html>'''

    def __init__(self, parent):
        wx.Dialog.__init__(self, parent, -1, 'About spyke', size=(350, 250))

        html = wx.html.HtmlWindow(self)
        html.SetPage(self.text)
        button = wx.Button(self, wx.ID_OK, "OK")

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(html, 1, wx.EXPAND|wx.ALL, 5)
        sizer.Add(button, 0, wx.ALIGN_CENTER|wx.ALL, 5)

        self.SetSizer(sizer)
        self.Layout()


class SpykeApp(wx.App):
    def OnInit(self, splash=False):
        if splash:
            bmp = wx.Image("res/splash.png").ConvertToBitmap()
            wx.SplashScreen(bmp, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT, 1000, None, -1)
            wx.Yield()

        frame = SpykeFrame(None)
        frame.Show(True)
        self.SetTopWindow(frame)
        return True


if __name__ == '__main__':
    app = SpykeApp(False)
    app.MainLoop()
