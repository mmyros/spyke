"""Main spyke window"""

from __future__ import division

__authors__ = 'Martin Spacek, Reza Lotun'

import wx
import wx.html
import cPickle
import os
import time

import spyke
from spyke import core, surf
from spyke.gui.plot import ChartPanel, LFPPanel, SpikePanel
import wxglade_gui

PIXPERCHAN = 80 # horizontally
SPIKEFRAMEHEIGHT = 700
CHARTFRAMESIZE = (800, SPIKEFRAMEHEIGHT)
LFPFRAMESIZE   = (200, SPIKEFRAMEHEIGHT)


class SpykeFrame(wxglade_gui.SpykeFrame):
    """spyke's main frame, inherits gui layout code auto-generated by wxGlade"""

    DEFAULTDIR = '/data/ptc15'
    FRAMETYPE2BUTTONID = {'spike': wx.ID_SPIKEWIN,
                          'chart': wx.ID_CHARTWIN,
                          'lfp': wx.ID_LFPWIN}

    def __init__(self, *args, **kwargs):
        wxglade_gui.SpykeFrame.__init__(self, *args, **kwargs)
        self.SetPosition(wx.Point(x=0, y=0)) # upper left corner
        self.dpos = {} # positions of data frames relative to main spyke frame
        self.surffname = ""
        self.sortfname = ""
        self.frames = {} # holds spike, chart, and lfp frames
        self.spiketw = 1000 # spike frame temporal window width (us)
        self.charttw = 50000 # chart frame temporal window width (us)
        self.lfptw = 1000000 # lfp frame temporal window width (us)
        self.t = None # current time position in recording (us)

        self.Bind(wx.EVT_CLOSE, self.OnExit)
        self.Bind(wx.EVT_MOVE, self.OnMove)
        self.slider.Bind(wx.EVT_SLIDER, self.OnSlider)

        # disable these menu items and tools until a .srf file is opened
        self.menubar.Enable(wx.ID_SPIKEWIN, False)
        self.menubar.Enable(wx.ID_CHARTWIN, False)
        self.menubar.Enable(wx.ID_LFPWIN, False)
        self.toolbar.EnableTool(wx.ID_SPIKEWIN, False)
        self.toolbar.EnableTool(wx.ID_CHARTWIN, False)
        self.toolbar.EnableTool(wx.ID_LFPWIN, False)

        # TODO: load recent file history and add it to menu (see wxGlade code that uses wx.FileHistory)

        self.OpenSurfFile(self.DEFAULTDIR + '/87 - track 7c spontaneous craziness.srf') # have this here just to make testing faster

    def OnNew(self, event):
        # TODO: what should actually go here? just check if an existing collection exists,
        # check if it's saved (if not, prompt to save), and then del it and init a new one?
        wxglade_gui.SpykeFrame.OnNew(self, event)

    def OnOpen(self, event):
        dlg = wx.FileDialog(self, message="Open surf or sort file",
                            defaultDir=self.DEFAULTDIR, defaultFile='',
                            wildcard="All files (*.*)|*.*|Surf files (*.srf)|*.srf|Sort files (*.sort)|*.sort",
                            style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            fname = dlg.GetPath()
            self.OpenFile(fname)
        dlg.Destroy()

    def OnSave(self, event):
        if not self.sortfname:
            self.OnSaveAs(event)
        else:
            self.SaveFile(self.sortfname) # save to existing sort fname

    def OnSaveAs(self, event):
        """Save collection to new .sort file"""
        dlg = wx.FileDialog(self, message="Save collection as",
                            defaultDir=self.DEFAULTDIR, defaultFile='',
                            wildcard="Sort files (*.sort)|*.sort|All files (*.*)|*.*",
                            style=wx.SAVE | wx.OVERWRITE_PROMPT)
        if dlg.ShowModal() == wx.ID_OK:
            fname = dlg.GetPath()
            self.SaveFile(fname)
        dlg.Destroy()

    def OnClose(self, event):
        # TODO: add confirmation dialog if collection not saved
        self.CloseSurfFile()

    def OnExit(self, event):
        # TODO: add confirmation dialog if collection not saved
        self.CloseSurfFile()
        self.Destroy()

    def OnAbout(self, event):
        dlg = SpykeAbout(self)
        dlg.ShowModal()
        dlg.Destroy()

    def OnSpike(self, event):
        """Spike window toggle menu/button event"""
        self.ToggleFrame('spike')

    def OnChart(self, event):
        """Chart window toggle menu/button event"""
        self.ToggleFrame('chart')

    def OnLFP(self, event):
        """LFP window toggle menu/button event"""
        self.ToggleFrame('lfp')

    def OnMove(self, event):
        """Move frame, and all dataframes as well, like docked windows"""
        for frametype, frame in self.frames.items():
            frame.Move(self.GetPosition() + self.dpos[frametype])
        #event.Skip() # apparently this isn't needed for a move event,
        # I guess the OS moves the frame no matter what you do with the event

    def OnSlider(self, event):
        """Strange: keyboard press or page on mouse click when slider in focus generates
        two slider events, and hence two plot events - mouse drag only generates one slider event"""
        self.seek(self.slider.GetValue())
        #print time.time(), 'OnSlider()'
        #event.Skip() # doesn't seem to be necessary

    def OpenFile(self, fname):
        """Open either .srf or .sort file"""
        ext = os.path.splitext(fname)[1]
        if ext == '.srf':
            self.OpenSurfFile(fname)
        elif ext == '.sort':
            self.OpenSortFile(fname)
        else:
            wx.MessageBox("%s is not a .srf or .sort file" % fname,
                          caption="Error", style=wx.OK|wx.ICON_EXCLAMATION)
            return

    def OpenSurfFile(self, fname):
        """Open a .srf file, and update display accordingly"""
        self.CloseSurfFile() # in case a .srf file and frames are already open
        self.surff = surf.File(fname)
        # TODO: parsing progress dialog
        self.surff.parse()
        self.Refresh() # parsing takes long, can block repainting events
        self.surffname = fname # bind it now that it's been successfully opened and parsed
        self.SetTitle(self.Title + ' - ' + self.surffname) # update the caption

        self.hpstream = core.Stream(self.surff.highpassrecords) # highpass record (spike) stream
        self.lpstream = core.Stream(self.surff.lowpassmultichanrecords) # lowpassmultichan record (LFP) stream
        self.t = self.hpstream.t0 + self.spiketw/2 # set current time position in recording (us)

        self.OpenFrame('spike')
        self.OpenFrame('chart')
        self.OpenFrame('lfp')

        # self has focus, but isn't in foreground after opening data frames
        #self.Raise() # doesn't seem to bring self to foreground
        #wx.GetApp().SetTopWindow(self) # neither does this

        self.range = (self.hpstream.t0 + self.spiketw/2,
                      self.hpstream.tend - self.spiketw/2) # us
        self.slider.SetRange(self.range[0], self.range[1])
        self.slider.SetValue(self.t)
        self.slider.SetLineSize(self.hpstream.tres) # us, TODO: this should be based on level of interpolation
        self.slider.SetPageSize(self.spiketw) # us
        self.EnableSurfWidgets(True)

    def CloseSurfFile(self):
        """Destroy data frames, close .srf file"""
        # need to specifically get a list of keys, not an iterator,
        # since self.frames dict changes size during iteration
        for frametype in self.frames.keys():
            self.CloseFrame(frametype) # deletes from dict
        try:
            self.surff.close()
        except AttributeError:
            pass
        self.t = None
        self.SetTitle("spyke") # update caption
        self.EnableSurfWidgets(False)

    def OpenFrame(self, frametype):
        """Create and bind a data frame, show it, plot its data"""
        if frametype not in self.frames: # check it doesn't already exist
            if frametype == 'spike':
                ncols = self.hpstream.probe.ncols
                frame = SpikeFrame(parent=self, stream=self.hpstream,
                                   tw=self.spiketw,
                                   pos=self.GetPosition() + wx.Point(self.GetSize()[0], 0),
                                   size=(ncols*PIXPERCHAN, SPIKEFRAMEHEIGHT))
            elif frametype == 'chart':
                pos=self.GetPosition() + wx.Point(self.GetSize()[0] + self.frames['spike'].GetSize()[0], 0)
                frame = ChartFrame(parent=self, stream=self.hpstream,
                                   tw=self.charttw, cw=self.spiketw,
                                   pos=pos,
                                   size=CHARTFRAMESIZE)
            elif frametype == 'lfp':
                pos = self.GetPosition() + wx.Point(self.GetSize()[0] + self.frames['spike'].GetSize()[0]
                                                    + self.frames['chart'].GetSize()[0], 0)
                frame = LFPFrame(parent=self, stream=self.lpstream,
                                 tw=self.lfptw, cw=self.charttw,
                                 pos=pos,
                                 size=LFPFRAMESIZE)
            self.frames[frametype] = frame
            self.dpos[frametype] = frame.GetPosition() - self.GetPosition()
        self.ShowFrame(frametype)

    def ShowFrame(self, frametype, enable=True):
        """Show/hide a data frame, enforce menu and toolbar states to correspond"""
        self.frames[frametype].Show(enable)
        self.menubar.Check(self.FRAMETYPE2BUTTONID[frametype], enable)
        self.toolbar.ToggleTool(self.FRAMETYPE2BUTTONID[frametype], enable)
        if enable:
            self.plot(frametype) # update only the newly shown frame's data, in case self.t changed since it was last visible
        #if enable:
        #    self.Raise() # children wx.MiniFrames are always on top of main spyke frame, self.Raise() doesn't seem to help. Must be an inherent property of wx.MiniFrames, which maybe isn't such a bad idea after all...

    def HideFrame(self, frametype):
        self.ShowFrame(frametype, False)

    def ToggleFrame(self, frametype):
        """Toggle visibility of a data frame"""
        frame = self.frames[frametype]
        self.ShowFrame(frametype, not frame.IsShown())

    def CloseFrame(self, frametype):
        """Hide frame, remove it from frames dict, destroy it"""
        self.HideFrame(frametype)
        frame = self.frames.pop(frametype)
        frame.Destroy()

    def EnableSurfWidgets(self, enable):
        """Enable/disable all widgets that require an open .srf file"""
        self.menubar.Enable(wx.ID_SPIKEWIN, enable)
        self.menubar.Enable(wx.ID_CHARTWIN, enable)
        self.menubar.Enable(wx.ID_LFPWIN, enable)
        self.toolbar.EnableTool(wx.ID_SPIKEWIN, enable)
        self.toolbar.EnableTool(wx.ID_CHARTWIN, enable)
        self.toolbar.EnableTool(wx.ID_LFPWIN, enable)
        self.file_control_panel.Enable(enable)
        self.notebook.Enable(enable)

    def seek(self, offset=0, relative=False):
        """Seek to position in surf file. offset is time in us. relative determines
        if offset is absolute or relative. If True, offset can be negative to seek
        backwards from current position"""
        self.oldt = self.t
        if relative:
            self.t = self.t + offset
        else:
            self.t = offset
        self.t = min(max(self.t, self.range[0]), self.range[1]) # constrain to within .range
        # only plot if t has actually changed, though this doesn't seem to improve
        # performance, maybe mpl is already doing something like this
        if self.t != self.oldt:
            self.plot()
        self.slider.SetValue(self.t) # update slider

    def tell(self):
        """Return current position in surf file"""
        return self.t

    def plot(self, frametype=None):
        """Update the contents of all the data frames, or just a specific one.
        Center each data frame on self.t, don't left justify"""
        if frametype == None: # update all visible frames
            keyvals = self.frames.items() # list of key:val tuples
        else: # update only a specific frame, if visible
            keyvals = [(frametype, self.frames[frametype])]
        for frametype, frame in keyvals:
            if frame.IsShown(): # only update if frame is shown, for performance
                if frametype == 'spike':
                    wave = self.hpstream[self.t-self.spiketw/2 : self.t+self.spiketw/2]
                elif frametype == 'chart':
                    wave = self.hpstream[self.t-self.charttw/2 : self.t+self.charttw/2]
                elif frametype == 'lfp':
                    wave = self.lpstream[self.t-self.lfptw/2 : self.t+self.lfptw/2]
                frame.panel.plot(wave, tref=self.t) # plot it
        #print time.time(), 'in plot()'

    def OpenSortFile(self, fname):
        """Open a collection from a .sort file"""
        # TODO: do something with data (data is the collection object????)
        try:
            f = file(fname, 'rb')
            data = cPickle.load(f)
            f.close()
            self.sortfname = fname # bind it now that it's been successfully loaded
            self.SetTitle(self.Title + ' - ' + self.sortfname)
        except cPickle.UnpicklingError:
            wx.MessageBox("Couldn't open %s as a sort file" % fname,
                          caption="Error", style=wx.OK|wx.ICON_EXCLAMATION)

    def SaveFile(self, fname):
        """Save collection to a .sort file"""
        if not os.path.splitext(fname)[1]:
            fname = fname + '.sort'
        f = file(fname, 'wb')
        cPickle.dump(self.collection, f)
        f.close()
        self.sortfname = fname # bind it now that it's been successfully saved
        self.SetTitle(self.Title + ' - ' + self.sortfname)


class DataFrame(wx.MiniFrame):
    """Base data frame to hold a custom spyke panel widget.
    Copied and modified from auto-generated wxglade_gui.py code"""

    STYLE = wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FRAME_TOOL_WINDOW # need SYSTEM_MENU to make close box appear in a TOOL_WINDOW, at least on win32

    def set_properties(self):
        self.SetTitle("data window")
        self.SetSize((160, 24))
        #self.AcceptsFocus(False) # don't allow a data frame to accept focus, make main spyke frame keep focus?

    def do_layout(self):
        dataframe_sizer = wx.BoxSizer(wx.HORIZONTAL)
        dataframe_sizer.Add(self.panel, 1, wx.EXPAND, 0)
        self.SetSizer(dataframe_sizer)
        self.Layout()

    def OnClose(self, event):
        self.Parent.HideFrame(self.frametype)

    def seek(self, *args, **kwargs):
        self.Parent.seek(*args, **kwargs)


class SpikeFrame(DataFrame):
    """Frame to hold the custom spike panel widget"""
    def __init__(self, parent=None, stream=None, tw=None, cw=None, *args, **kwds):
        kwds["style"] = self.STYLE
        wx.MiniFrame.__init__(self, parent, *args, **kwds)
        self.panel = SpikePanel(self, -1, stream=stream, tw=tw, cw=cw)

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.set_properties()
        self.do_layout()

    def set_properties(self):
        self.SetTitle("spike window")


class ChartFrame(DataFrame):
    """Frame to hold the custom chart panel widget"""
    def __init__(self, parent=None, stream=None, tw=None, cw=None, *args, **kwds):
        self.STYLE = self.STYLE|wx.MAXIMIZE_BOX # no actual button, but allows caption double-click to maximize
        kwds["style"] = self.STYLE
        wx.MiniFrame.__init__(self, parent, *args, **kwds)
        self.panel = ChartPanel(self, -1, stream=stream, tw=tw, cw=cw)

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.set_properties()
        self.do_layout()

    def set_properties(self):
        self.SetTitle("chart window")


class LFPFrame(DataFrame):
    """Frame to hold the custom LFP panel widget"""
    def __init__(self, parent=None, stream=None, tw=None, cw=None, *args, **kwds):
        self.STYLE = self.STYLE|wx.MAXIMIZE_BOX # no actual button, but allows caption double-click to maximize
        kwds["style"] = self.STYLE
        wx.MiniFrame.__init__(self, parent, *args, **kwds)
        self.panel = LFPPanel(self, -1, stream=stream, tw=tw, cw=cw)

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.set_properties()
        self.do_layout()

    def set_properties(self):
        self.SetTitle("LFP window")


class SpykeAbout(wx.Dialog):
    text = '''
        <html>
        <body bgcolor="#D4D0C8">
        <center><table bgcolor="#000000" width="100%" cellspacing="0"
        cellpadding="0" border="0">
        <tr>
            <td align="center"><h1><font color="#00FF00">spyke</font></h1></td>
        </tr>
        </table>
        </center>
        <p><b>spyke</b> is a tool for neuronal spike sorting.
        </p>

        <p>Copyright &copy; 2008 Reza Lotun, Martin Spacek</p>
        </body>
        </html>'''

    def __init__(self, parent):
        wx.Dialog.__init__(self, parent, -1, 'About spyke', size=(350, 250))

        html = wx.html.HtmlWindow(self)
        html.SetPage(self.text)
        button = wx.Button(self, wx.ID_OK, "OK")

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(html, 1, wx.EXPAND|wx.ALL, 5)
        sizer.Add(button, 0, wx.ALIGN_CENTER|wx.ALL, 5)

        self.SetSizer(sizer)
        self.Layout()


class SpykeApp(wx.App):
    def OnInit(self, splash=False):
        if splash:
            bmp = wx.Image("res/splash.png").ConvertToBitmap()
            wx.SplashScreen(bmp, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT, 1000, None, -1)
            wx.Yield()
        self.spykeframe = SpykeFrame(None)
        self.spykeframe.Show()
        self.SetTopWindow(self.spykeframe)
        return True


if __name__ == '__main__':
    app = SpykeApp(redirect=False) # output to stderr and stdout
    app.MainLoop()
