- for some reason, using the latest mpl from git (instead of 0.99.3), causes much slower plotting. I noticed this before with mpl 1.0. Need to check the list, or check if the API has changed in some significant way




    2011-01-06 1.0.1 a9f3f3a50745a1ca0e666bb1b6d0b9d782553dd9
    2010-07-06 1.0.0 668a769fb6ef399476d573bf86cceb2fa9168495
    2010-06-06 d29f2572cede4ed22a82f4c90aa4178166431881
    2010-05-31 92a6c77f4662d6b81e18909fd5802ade6f6f5e06 - Axes.axhline
    2010-05-30 3101e00ed87b91b66f0290b738ccc8ac3faf29b0
    2010-05-28 ca9d6b29595cf556504c457c8879fbc89c32a217 - mdboom
        - slow figure/axes init regression happened in above commit:

msg: Fix memory leak caused by never disconnecting callbacks

ca9d6b29595cf556504c457c8879fbc89c32a217
 lib/matplotlib/cbook.py |  108 +++++++++++++++++++++++++++++++++++++++++++----
 1 files changed, 99 insertions(+), 9 deletions(-)

diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py
index 7947b1e..5f9c0e0 100644
--- a/lib/matplotlib/cbook.py
+++ b/lib/matplotlib/cbook.py
@@ -13,6 +13,7 @@ import cPickle
 import os.path
 import random
 import urllib2
+import new
 
 import matplotlib
 
@@ -124,12 +125,87 @@ class CallbackRegistry:
        callbacks.disconnect(ideat)        # disconnect oneat
        callbacks.process('eat', 456)      # nothing will be called
 
-    """
+    In practice, one should always disconnect all callbacks when they
+    are no longer needed to avoid dangling references (and thus memory
+    leaks).  However, real code in matplotlib rarely does so, and due
+    to its design, it is rather difficult to place this kind of code.
+    To get around this, and prevent this class of memory leaks, we
+    instead store weak references to bound methods only, so when the
+    destination object needs to die, the CallbackRegistry won't keep
+    it alive.  The Python stdlib weakref module can not create weak
+    references to bound methods directly, so we need to create a proxy
+    object to handle weak references to bound methods (or regular free
+    functions).  This technique was shared by Peter Parente on his
+    `"Mindtrove" blog
+    <http://mindtrove.info/articles/python-weak-references/>`_.
+    """
+    class BoundMethodProxy(object):
+        '''
+        Our own proxy object which enables weak references to bound and unbound
+        methods and arbitrary callables. Pulls information about the function,
+        class, and instance out of a bound method. Stores a weak reference to the
+        instance to support garbage collection.
+
+        @organization: IBM Corporation
+        @copyright: Copyright (c) 2005, 2006 IBM Corporation
+        @license: The BSD License
+
+        Minor bugfixes by Michael Droettboom
+        '''
+        def __init__(self, cb):
+            try:
+                try:
+                    self.inst = ref(cb.im_self)
+                except TypeError:
+                    self.inst = None
+                self.func = cb.im_func
+                self.klass = cb.im_class
+            except AttributeError:
+                self.inst = None
+                self.func = cb
+                self.klass = None
+
+        def __call__(self, *args, **kwargs):
+            '''
+            Proxy for a call to the weak referenced object. Take
+            arbitrary params to pass to the callable.
+
+            Raises `ReferenceError`: When the weak reference refers to
+            a dead object
+            '''
+            if self.inst is not None and self.inst() is None:
+                raise ReferenceError
+            elif self.inst is not None:
+                # build a new instance method with a strong reference to the instance
+                mtd = new.instancemethod(self.func, self.inst(), self.klass)
+            else:
+                # not a bound method, just return the func
+                mtd = self.func
+            # invoke the callable and return the result
+            return mtd(*args, **kwargs)
+
+        def __eq__(self, other):
+            '''
+            Compare the held function and instance with that held by
+            another proxy.
+            '''
+            try:
+                if self.inst is None:
+                    return self.func == other.func and other.inst is None
+                else:
+                    return self.func == other.func and self.inst() == other.inst()
+            except Exception:
+                return False
+
+        def __ne__(self, other):
+            '''
+            Inverse of __eq__.
+            '''
+            return not self.__eq__(other)
+
     def __init__(self, signals):
         '*signals* is a sequence of valid signals'
         self.signals = set(signals)
-        # callbacks is a dict mapping the signal to a dictionary
-        # mapping callback id to the callback function
         self.callbacks = dict([(s, dict()) for s in signals])
         self._cid = 0
 
@@ -146,8 +222,15 @@ class CallbackRegistry:
         func will be called
         """
         self._check_signal(s)
-        self._cid +=1
-        self.callbacks[s][self._cid] = func
+        proxy = self.BoundMethodProxy(func)
+        for cid, callback in self.callbacks[s].items():
+            # Clean out dead references
+            if callback.inst is not None and callback.inst() is None:
+                del self.callbacks[s][cid]
+            elif callback == proxy:
+                return cid
+        self._cid += 1
+        self.callbacks[s][self._cid] = proxy
         return self._cid
 
     def disconnect(self, cid):
@@ -155,9 +238,12 @@ class CallbackRegistry:
         disconnect the callback registered with callback id *cid*
         """
         for eventname, callbackd in self.callbacks.items():
-            try: del callbackd[cid]
-            except KeyError: continue
-            else: return
+            try:
+                del callbackd[cid]
+            except KeyError:
+                continue
+            else:
+                return
 
     def process(self, s, *args, **kwargs):
         """
@@ -165,8 +251,12 @@ class CallbackRegistry:
         callbacks on *s* will be called with *\*args* and *\*\*kwargs*
         """
         self._check_signal(s)
-        for func in self.callbacks[s].values():
-            func(*args, **kwargs)
+        for cid, proxy in self.callbacks[s].items():
+            # Clean out dead references
+            if proxy.inst is not None and proxy.inst() is None:
+                del self.callbacks[s][cid]
+            else:
+                proxy(*args, **kwargs)
 

    2010-05-28 7d7590e077125b4dcd12fdcf0f20d0091ccc97ba just docstring typos
    2010-05-27 36b06bcd62fc72c07c29e84aadb5f46167dd8935
    2010-05-21 a331393e8fde6334e20fda6e3266a8a5a063ac74
    2010-05-04 d4e113aa0775350aeae6b78f321907708fea00a7 by ddale
    2010-04-05 a241e6efcaa4fc146c9697bbb52b021f472f18b3
    2010-01-01 bbcb85a663bbbd797845d9a4f3f58c31ea96eb56 by astraw.
    2009-12-01 50fc548465b1525255bc2d9f66a6c7c95fd38a75 by ddale - qt blitting
        - plotting regression happened here, in the above commit:
        

50fc548465b1525255bc2d9f66a6c7c95fd38a75
 CHANGELOG                                 |    3 +++
 lib/matplotlib/backends/backend_qt4agg.py |    2 +-
 2 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index 3f9bd98..da98433 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,3 +1,6 @@
+2009-12-01 Applied Laurent Dufrechou's patch to improve blitting with
+           the qt4 backend - DSD 
+
 2009-11-13 The pdf backend now allows changing the contents of
            a pdf file's information dictionary via PdfPages.infodict. - JKS
 
diff --git a/lib/matplotlib/backends/backend_qt4agg.py b/lib/matplotlib/backends/backend_qt4agg.py
index 45a1b73..89d9f4e 100644
--- a/lib/matplotlib/backends/backend_qt4agg.py
+++ b/lib/matplotlib/backends/backend_qt4agg.py
@@ -138,7 +138,7 @@ class FigureCanvasQTAgg( FigureCanvasQT, FigureCanvasAgg ):
         self.replot = bbox
         l, b, w, h = bbox.bounds
         t = b + h
-        self.update(l, self.renderer.height-t, w, h)
+        self.repaint(l, self.renderer.height-t, w, h)
 
     def print_figure(self, *args, **kwargs):
         FigureCanvasAgg.print_figure(self, *args, **kwargs)

        
        
        
    2009-11-30 a2a7fa149bee423b68d098519c8b934c0a9d1428 by jdh
    2009-10-12 1427eb9dea89e1d52e0c2cea4e05626e5ec802c0 by astraw
    2009-10-12 5ed248fb740c524ac2c8be569e88870d37f4551c by mdm
    2009-10-12 2a1891fd090edf91c2606930eec4c6fe48b871c2 by mdm
    2009-10-11 6c62ee625d16d05ef62fc25d5800bb5f1afd04e2 by jouni
    2009-10-10 787d3feeddcf935ad57e34cf89b99e1b69274ec4 by efiring
    2009-10-06 3e5ae2d979cb85059ebc20a9380e2719cefba81f
    2009-10-01 a4389830f95c0168d5bc64db32f7f0dd849fc427
    2009-09-23 0.99.1 8398d9bd2c471108e2322dc889999f39cfb49714
    2009-09-12 0.99.1-rc 2edf572c5c5fd3dd15e7b96c9ac202ff07f4224d
    2009-08-06 0.99 3f1a8dd40ca750962c1ceebd891123da873ee79d by jdh




    - seems especially slow when random sampling, seems normal when selectin a range of spikes with the mouse
    - might be an issue in matplotlib/lib/matplotlib/lines.py or cbook.py - callback event connection gets caught in a loop maybe? Got this traceback when trying to plot lots of spikes at once from the same neuron:
    
home/mspacek/source/matplotlib/lib/matplotlib/lines.pyc in set_axes(self=<matplotlib.lines.Line2D object>, ax=<matplotlib.axes.Axes object>)
    399         Artist.set_axes(self, ax)
    400         if ax.xaxis is not None:
--> 401             self._xcid = ax.xaxis.callbacks.connect('units', self.recache_always)
        global CARETUP = 6
        global CARETDOWN = 7
        global CARETLEFT = 4
        global CARETRIGHT = 5
    402         if ax.yaxis is not None:
    403             self._ycid = ax.yaxis.callbacks.connect('units', self.recache_always)

/home/mspacek/source/matplotlib/lib/matplotlib/cbook.pyc in connect(self=<matplotlib.cbook.CallbackRegistry instance>, s='units', func=<bound method Line2D.recache_always of <matplotlib.lines.Line2D object>>)
    234                 del self.callbacks[s][cid]
    235             elif callback == proxy:
--> 236                 return cid
        global cache_file = undefined
        s = 'units'
    237         self._cid += 1
    238         self.callbacks[s][self._cid] = proxy

KeyboardInterrupt: 
> /home/mspacek/source/matplotlib/lib/matplotlib/cbook.py(236)connect()
    235             elif callback == proxy:
--> 236                 return cid
    237         self._cid += 1
