#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade HG on Tue Mar 09 17:02:06 2010 from "C:\bzr\spyke\dev\spyke\wxglade_gui.wxg"

import wx

# begin wxGlade: extracode
from spyke.core import SpykeListCtrl, CListCtrl, NListCtrl, NSListCtrl, SListCtrl
wx.ID_SAVEPARSE = wx.NewId()
wx.ID_SAVERESAMPLE = wx.NewId()
wx.ID_SAVEWAVE = wx.NewId()
wx.ID_IMPORTNEURONS = wx.NewId()
wx.ID_EXPORTSPIKES = wx.NewId()
wx.ID_EXPORTDIN = wx.NewId()
wx.ID_EXPORTTEXTHEADER = wx.NewId()
wx.ID_EXPORTALL = wx.NewId()
wx.ID_SPIKEWIN = wx.NewId()
wx.ID_CHARTWIN = wx.NewId()
wx.ID_LFPWIN = wx.NewId()
wx.ID_SORTWIN = wx.NewId()
wx.ID_CLUSTERWIN = wx.NewId()
wx.ID_PYSHELL = wx.NewId()
wx.ID_WAVEFORMS = wx.NewId()
wx.ID_RASTERS = wx.NewId()
wx.ID_TREF = wx.NewId()
wx.ID_VREF = wx.NewId()
wx.ID_CARET = wx.NewId()
wx.ID_SAMPLING = wx.NewId()
wx.ID_25 = wx.NewId()
wx.ID_50 = wx.NewId()
wx.ID_100 = wx.NewId()
wx.ID_SHCORRECT = wx.NewId()
wx.ID_ALIGN_MAX = wx.NewId()
wx.ID_ALIGN_MIN = wx.NewId()
from plot import SpikeSortPanel
#from plot import ChartSortPanel # unimplemented
# end wxGlade



class SpykeFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SpykeFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_NEW, "&New\tCtrl-N", "Create new sort session", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_OPEN, "&Open\tCtrl-O", "Open .srf, .sort or .wave file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_SAVEPARSE, "Save .parse", "Save parse file with current channel selection", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_SAVERESAMPLE, "Save .resample", "Save all highpass data to contiguous .resample file with current sampling settings, for faster future access", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_SAVE, "&Save .sort\tCtrl-S", "Save sort session", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save .sort As", "Save sort session as", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_SAVEWAVE, "Save .wave", "Save spike waveforms to .wave file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_IMPORTNEURONS, "Neurons", "Import neurons from a .sort file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendMenu(wx.NewId(), "Import", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_EXPORTSPIKES, "Spikes", "Export sorted spikes to binary .spk files", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.Append(wx.ID_EXPORTDIN, "DIN", "Export stimulus DIN to a binary .din file", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.Append(wx.ID_EXPORTTEXTHEADER, "Textheader", "Export stimulus textheader to a .textheader file", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.AppendSeparator()
        wxglade_tmp_menu_sub.Append(wx.ID_EXPORTALL, "All", "Export spikes, DIN, and textheader", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendMenu(wx.NewId(), "Export", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_CLOSE, "&Close\tCtrl-W", "Close .srf file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_EXIT, "E&xit", "Exit", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_SPIKEWIN, "Spike window", "Toggle spike window", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_CHARTWIN, "Chart window", "Toggle chart window", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_LFPWIN, "LFP window", "Toggle LFP window", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_SORTWIN, "Sort window", "Toggle sort window", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_CLUSTERWIN, "Cluster window", "Toggle cluster window", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_PYSHELL, "PyShell window", "Toggle PyShell window", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_WAVEFORMS, "Waveforms", "Toggle waveforms", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_RASTERS, "Rasters", "Toggle spike rasters", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_TREF, "Time ref", "Toggle vertical time reference", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_VREF, "Voltage ref", "Toggle horizontal voltage reference", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(wx.ID_CARET, "Caret", "Toggle shaded time window", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(wx.ID_25, "25 kHz", "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_50, "50 kHz", "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.Append(wx.ID_100, "100 kHz", "", wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.AppendSeparator()
        wxglade_tmp_menu_sub.Append(wx.ID_SHCORRECT, "Sample && hold correct", "Enable per-channel sample & hold delay correction", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendMenu(wx.ID_SAMPLING, "Sampling", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "&About...", "Show about window", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddLabelTool(wx.ID_NEW, "New", wx.Bitmap("res/new.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Create new sort session", "Create new sort session")
        self.toolbar.AddLabelTool(wx.ID_OPEN, "Open", wx.Bitmap("res/open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open .srf, .sort or .wave file", "Open .srf, .sort or .wave file")
        self.toolbar.AddLabelTool(wx.ID_CLOSE, "Close", wx.Bitmap("res/close.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Close .srf file", "Close .srf file")
        self.toolbar.AddLabelTool(wx.ID_SAVE, "Save", wx.Bitmap("res/save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save sort session", "Save sort session")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.ID_SPIKEWIN, "Spike", wx.Bitmap("res/spike.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle spike window", "Toggle spike window")
        self.toolbar.AddLabelTool(wx.ID_CHARTWIN, "Chart", wx.Bitmap("res/chart.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle chart window", "Toggle chart window")
        self.toolbar.AddLabelTool(wx.ID_LFPWIN, "LFP", wx.Bitmap("res/lfp.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle LFP window", "Toggle LFP window")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.ID_SORTWIN, "Sort", wx.Bitmap("res/sort.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle sort window", "Toggle sort window")
        self.toolbar.AddLabelTool(wx.ID_CLUSTERWIN, "Cluster", wx.Bitmap("res/cluster.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle cluster window", "Toggle cluster window")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.ID_PYSHELL, "PyShell", wx.Bitmap("res/pyshell.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Toggle PyShell window", "Toggle PyShell window")
        # Tool Bar end
        self.file_pos_control_panel = wx.Panel(self, -1)
        self.file_min_label = wx.StaticText(self.file_pos_control_panel, -1, "file_min_label")
        self.file_pos_combo_box = wx.ComboBox(self.file_pos_control_panel, -1, choices=["start", "end"], style=wx.CB_DROPDOWN)
        self.file_pos_combo_box_units_label = wx.StaticText(self.file_pos_control_panel, -1, "us")
        self.file_max_label = wx.StaticText(self.file_pos_control_panel, -1, "file_max_label")
        self.slider = wx.Slider(self.file_pos_control_panel, -1, 0, 0, 10, style=wx.SL_HORIZONTAL|wx.SL_SELRANGE)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.detect_pane = wx.Panel(self.notebook, -1)
        self.globalfixedthresh_radio_btn = wx.RadioButton(self.detect_pane, -1, "GlobalFixed:")
        self.fixedthresh_spin_ctrl = wx.SpinCtrl(self.detect_pane, -1, "", min=-2147483647, max=2147483647)
        self.fixedthresh_units_label = wx.StaticText(self.detect_pane, -1, "uV")
        self.chanfixedthresh_radio_btn = wx.RadioButton(self.detect_pane, -1, "ChanFixed;")
        self.dynamicthresh_radio_btn = wx.RadioButton(self.detect_pane, -1, "Dynamic:")
        self.noisemult_text_ctrl = wx.TextCtrl(self.detect_pane, -1, "", style=wx.TE_CENTRE)
        self.label_2 = wx.StaticText(self.detect_pane, -1, "*")
        self.noise_method_choice = wx.Choice(self.detect_pane, -1, choices=["median", "stdev"])
        self.Vpp_label = wx.StaticText(self.detect_pane, -1, "Vpp >= ")
        self.ppthreshmult_text_ctrl = wx.TextCtrl(self.detect_pane, -1, "", style=wx.TE_CENTRE)
        self.Vp_label = wx.StaticText(self.detect_pane, -1, "* thresh; ")
        self.dt_label = wx.StaticText(self.detect_pane, -1, "phase dt <= ")
        self.dt_spin_ctrl = wx.SpinCtrl(self.detect_pane, -1, "", min=0, max=2147483647)
        self.dt_units_label = wx.StaticText(self.detect_pane, -1, "us")
        self.threshold_sizer_staticbox = wx.StaticBox(self.detect_pane, -1, "Threshold")
        self.range_start_combo_box = wx.ComboBox(self.detect_pane, -1, choices=["start", "now", "end"], style=wx.CB_DROPDOWN)
        self.label_5 = wx.StaticText(self.detect_pane, -1, "to")
        self.range_end_combo_box = wx.ComboBox(self.detect_pane, -1, choices=["end", "now", "start"], style=wx.CB_DROPDOWN)
        self.range_units_label = wx.StaticText(self.detect_pane, -1, "us")
        self.nspikes_label = wx.StaticText(self.detect_pane, -1, "nspikes:")
        self.blocksize_label = wx.StaticText(self.detect_pane, -1, "blocksize:")
        self.nspikes_spin_ctrl = wx.SpinCtrl(self.detect_pane, -1, "", min=0, max=2147483647)
        self.blocksize_combo_box = wx.ComboBox(self.detect_pane, -1, choices=[], style=wx.CB_DROPDOWN)
        self.blocksize_units_label = wx.StaticText(self.detect_pane, -1, "us")
        self.range_sizer_staticbox = wx.StaticBox(self.detect_pane, -1, "Range")
        self.lockout_label = wx.StaticText(self.detect_pane, -1, "Lockout:")
        self.lockr_spin_ctrl = wx.SpinCtrl(self.detect_pane, -1, "", min=0, max=2147483647)
        self.lockout_units_label = wx.StaticText(self.detect_pane, -1, "um")
        self.include_label = wx.StaticText(self.detect_pane, -1, "Include:")
        self.inclr_spin_ctrl = wx.SpinCtrl(self.detect_pane, -1, "", min=0, max=2147483647)
        self.include_units_label = wx.StaticText(self.detect_pane, -1, "um")
        self.radii_sizer_staticbox = wx.StaticBox(self.detect_pane, -1, "Radii")
        self.detect_button = wx.Button(self.detect_pane, -1, "Detect")
        self.random_sample_checkbox = wx.CheckBox(self.detect_pane, -1, "random sample")
        self.label_3 = wx.StaticText(self.detect_pane, -1, "total nspikes:")
        self.total_nspikes_label = wx.StaticText(self.detect_pane, -1, "0")
        self.detection_list = SpykeListCtrl(self.detect_pane, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.extract_pane = wx.Panel(self.notebook, -1)
        self.XY_extract_radio_box = wx.RadioBox(self.extract_pane, -1, "X-Y localization", choices=["Gaussian fit", "Spatial mean", "Splines 1D fit"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.XY_extract_button = wx.Button(self.extract_pane, -1, "Extract")
        self.wavelet_extract_radio_box = wx.RadioBox(self.extract_pane, -1, "Wavelet coefficients", choices=["Haar"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.wavelet_extract_button = wx.Button(self.extract_pane, -1, "Extract")
        self.cluster_pane = wx.Panel(self.notebook, -1)
        self.add_button = wx.Button(self.cluster_pane, -1, "Add", style=wx.BU_EXACTFIT)
        self.del_button = wx.Button(self.cluster_pane, -1, "Del", style=wx.BU_EXACTFIT)
        self.plot_button = wx.Button(self.cluster_pane, -1, "Plot", style=wx.BU_EXACTFIT)
        self.clist = CListCtrl(self.cluster_pane, -1, style=wx.LC_LIST|wx.LC_VIRTUAL|wx.SUNKEN_BORDER)
        self.sizer_12_staticbox = wx.StaticBox(self.cluster_pane, -1, "Clusters")
        self.cluster_params_pane = wx.Panel(self.cluster_pane, -1)
        self.label_13 = wx.StaticText(self.cluster_params_pane, -1, "dims")
        self.label_10 = wx.StaticText(self.cluster_params_pane, -1, "pos")
        self.label_11 = wx.StaticText(self.cluster_params_pane, -1, "ori")
        self.label_12 = wx.StaticText(self.cluster_params_pane, -1, "scale")
        self.label_7 = wx.StaticText(self.cluster_params_pane, -1, "x:")
        self.xdim = wx.ComboBox(self.cluster_params_pane, -1, choices=["x0", "y0", "Vpp", "V0", "V1", "w0", "w1", "w2", "w3", "w4", "dphase"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.xpos = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-2147483647, max=2147483647)
        self.xori = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-90, max=90)
        self.xscale = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=0, max=2147483647)
        self.label_8 = wx.StaticText(self.cluster_params_pane, -1, "y:")
        self.ydim = wx.ComboBox(self.cluster_params_pane, -1, choices=["x0", "y0", "Vpp", "V0", "V1", "w0", "w1", "w2", "w3", "w4", "dphase"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.ypos = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-2147483647, max=2147483647)
        self.yori = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-90, max=90)
        self.yscale = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=0, max=2147483647)
        self.label_9 = wx.StaticText(self.cluster_params_pane, -1, "z:")
        self.zdim = wx.ComboBox(self.cluster_params_pane, -1, choices=["x0", "y0", "Vpp", "V0", "V1", "w0", "w1", "w2", "w3", "w4", "dphase"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.zpos = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-2147483647, max=2147483647)
        self.zori = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=-90, max=90)
        self.zscale = wx.SpinCtrl(self.cluster_params_pane, -1, "", min=0, max=2147483647)
        self.apply_cluster_button = wx.Button(self.cluster_params_pane, -1, "Apply", style=wx.BU_EXACTFIT)
        self.apply_cluster_button_copy = wx.Button(self.cluster_params_pane, -1, "Apply all", style=wx.BU_EXACTFIT)
        self.sizer_15_staticbox = wx.StaticBox(self.cluster_params_pane, -1, "Cluster parameters")
        self.validate_pane = wx.Panel(self.notebook, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnNew, id=wx.ID_NEW)
        self.Bind(wx.EVT_MENU, self.OnOpen, id=wx.ID_OPEN)
        self.Bind(wx.EVT_MENU, self.OnSaveParse, id=wx.ID_SAVEPARSE)
        self.Bind(wx.EVT_MENU, self.OnSaveResample, id=wx.ID_SAVERESAMPLE)
        self.Bind(wx.EVT_MENU, self.OnSave, id=wx.ID_SAVE)
        self.Bind(wx.EVT_MENU, self.OnSaveAs, id=wx.ID_SAVEAS)
        self.Bind(wx.EVT_MENU, self.OnSaveWave, id=wx.ID_SAVEWAVE)
        self.Bind(wx.EVT_MENU, self.OnImportNeurons, id=wx.ID_IMPORTNEURONS)
        self.Bind(wx.EVT_MENU, self.OnExportSpikes, id=wx.ID_EXPORTSPIKES)
        self.Bind(wx.EVT_MENU, self.OnExportDIN, id=wx.ID_EXPORTDIN)
        self.Bind(wx.EVT_MENU, self.OnExportTextheader, id=wx.ID_EXPORTTEXTHEADER)
        self.Bind(wx.EVT_MENU, self.OnExportAll, id=wx.ID_EXPORTALL)
        self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_CLOSE)
        self.Bind(wx.EVT_MENU, self.OnExit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.OnSpike, id=wx.ID_SPIKEWIN)
        self.Bind(wx.EVT_MENU, self.OnChart, id=wx.ID_CHARTWIN)
        self.Bind(wx.EVT_MENU, self.OnLFP, id=wx.ID_LFPWIN)
        self.Bind(wx.EVT_MENU, self.OnSort, id=wx.ID_SORTWIN)
        self.Bind(wx.EVT_MENU, self.OnCluster, id=wx.ID_CLUSTERWIN)
        self.Bind(wx.EVT_MENU, self.OnPyShell, id=wx.ID_PYSHELL)
        self.Bind(wx.EVT_MENU, self.OnWaveforms, id=wx.ID_WAVEFORMS)
        self.Bind(wx.EVT_MENU, self.OnRasters, id=wx.ID_RASTERS)
        self.Bind(wx.EVT_MENU, self.OnTref, id=wx.ID_TREF)
        self.Bind(wx.EVT_MENU, self.OnVref, id=wx.ID_VREF)
        self.Bind(wx.EVT_MENU, self.OnCaret, id=wx.ID_CARET)
        self.Bind(wx.EVT_MENU, self.OnSampling, id=wx.ID_25)
        self.Bind(wx.EVT_MENU, self.OnSampling, id=wx.ID_50)
        self.Bind(wx.EVT_MENU, self.OnSampling, id=wx.ID_100)
        self.Bind(wx.EVT_MENU, self.OnSHCorrect, id=wx.ID_SHCORRECT)
        self.Bind(wx.EVT_MENU, self.OnAbout, id=wx.ID_ABOUT)
        self.Bind(wx.EVT_TOOL, self.OnNew, id=wx.ID_NEW)
        self.Bind(wx.EVT_TOOL, self.OnOpen, id=wx.ID_OPEN)
        self.Bind(wx.EVT_TOOL, self.OnClose, id=wx.ID_CLOSE)
        self.Bind(wx.EVT_TOOL, self.OnSave, id=wx.ID_SAVE)
        self.Bind(wx.EVT_TOOL, self.OnSpike, id=wx.ID_SPIKEWIN)
        self.Bind(wx.EVT_TOOL, self.OnChart, id=wx.ID_CHARTWIN)
        self.Bind(wx.EVT_TOOL, self.OnLFP, id=wx.ID_LFPWIN)
        self.Bind(wx.EVT_TOOL, self.OnSort, id=wx.ID_SORTWIN)
        self.Bind(wx.EVT_TOOL, self.OnCluster, id=wx.ID_CLUSTERWIN)
        self.Bind(wx.EVT_TOOL, self.OnPyShell, id=wx.ID_PYSHELL)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnFilePosComboBox, self.file_pos_combo_box)
        self.Bind(wx.EVT_COMBOBOX, self.OnFilePosComboBox, self.file_pos_combo_box)
        self.Bind(wx.EVT_BUTTON, self.OnDetect, self.detect_button)
        self.Bind(wx.EVT_BUTTON, self.OnXYExtract, self.XY_extract_button)
        self.Bind(wx.EVT_BUTTON, self.OnWaveletExtract, self.wavelet_extract_button)
        self.Bind(wx.EVT_BUTTON, self.OnAddCluster, self.add_button)
        self.Bind(wx.EVT_BUTTON, self.OnDelCluster, self.del_button)
        self.Bind(wx.EVT_BUTTON, self.OnClusterPlot, self.plot_button)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnCListSelect, self.clist)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnCListSelect, self.clist)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.OnCListSelect, self.clist)
        self.Bind(wx.EVT_COMBOBOX, self.OnDim, self.xdim)
        self.Bind(wx.EVT_SPINCTRL, self.OnXPos, self.xpos)
        self.Bind(wx.EVT_SPINCTRL, self.OnXOri, self.xori)
        self.Bind(wx.EVT_SPINCTRL, self.OnXScale, self.xscale)
        self.Bind(wx.EVT_COMBOBOX, self.OnDim, self.ydim)
        self.Bind(wx.EVT_SPINCTRL, self.OnYPos, self.ypos)
        self.Bind(wx.EVT_SPINCTRL, self.OnYOri, self.yori)
        self.Bind(wx.EVT_SPINCTRL, self.OnYScale, self.yscale)
        self.Bind(wx.EVT_COMBOBOX, self.OnDim, self.zdim)
        self.Bind(wx.EVT_SPINCTRL, self.OnZPos, self.zpos)
        self.Bind(wx.EVT_SPINCTRL, self.OnZOri, self.zori)
        self.Bind(wx.EVT_SPINCTRL, self.OnZScale, self.zscale)
        self.Bind(wx.EVT_BUTTON, self.OnApplyCluster, self.apply_cluster_button)
        self.Bind(wx.EVT_BUTTON, self.OnApplyAllClusters, self.apply_cluster_button_copy)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SpykeFrame.__set_properties
        self.SetTitle("spyke")
        self.SetSize((690, 320))
        self.toolbar.Realize()
        self.file_pos_combo_box.SetMinSize((100, -1))
        self.file_pos_combo_box.SetWindowStyle(wx.TE_PROCESS_ENTER)
        self.file_pos_combo_box.SetSelection(-1)
        self.globalfixedthresh_radio_btn.SetValue(1)
        self.fixedthresh_spin_ctrl.SetMinSize((55, -1))
        self.noisemult_text_ctrl.SetMinSize((35, -1))
        self.noise_method_choice.SetSelection(0)
        self.ppthreshmult_text_ctrl.SetMinSize((35, -1))
        self.dt_spin_ctrl.SetMinSize((50, -1))
        self.range_start_combo_box.SetMinSize((90, -1))
        self.range_start_combo_box.SetSelection(0)
        self.label_5.SetMinSize((-1, -1))
        self.range_end_combo_box.SetMinSize((90, -1))
        self.range_end_combo_box.SetSelection(0)
        self.nspikes_spin_ctrl.SetMinSize((90, -1))
        self.blocksize_combo_box.SetMinSize((90, -1))
        self.lockr_spin_ctrl.SetMinSize((60, -1))
        self.inclr_spin_ctrl.SetMinSize((60, -1))
        self.detect_button.SetToolTipString("Creates a new detection run")
        self.detection_list.SetToolTipString("List of detection runs")
        self.detect_pane.SetToolTipString("Detect spikes")
        self.XY_extract_radio_box.SetSelection(0)
        self.wavelet_extract_radio_box.SetSelection(0)
        self.extract_pane.SetToolTipString("Extract spike parameters")
        self.clist.SetMinSize((150, 132))
        self.xdim.SetMinSize((70, -1))
        self.xdim.SetSelection(0)
        self.xpos.SetMinSize((70, -1))
        self.xori.SetMinSize((70, -1))
        self.xscale.SetMinSize((70, -1))
        self.ydim.SetMinSize((70, -1))
        self.ydim.SetSelection(1)
        self.ypos.SetMinSize((70, -1))
        self.yori.SetMinSize((70, -1))
        self.yscale.SetMinSize((70, -1))
        self.zdim.SetMinSize((70, -1))
        self.zdim.SetSelection(2)
        self.zpos.SetMinSize((70, -1))
        self.zori.SetMinSize((70, -1))
        self.zscale.SetMinSize((70, -1))
        self.cluster_pane.SetToolTipString("Cluster parameters")
        self.validate_pane.SetToolTipString("Validate sorted spikes")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SpykeFrame.__do_layout
        spykeframe_sizer = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_15_staticbox.Lower()
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.VERTICAL)
        grid_sizer_3 = wx.FlexGridSizer(5, 5, 0, 0)
        self.sizer_12_staticbox.Lower()
        sizer_12 = wx.StaticBoxSizer(self.sizer_12_staticbox, wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        detect_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.radii_sizer_staticbox.Lower()
        radii_sizer = wx.StaticBoxSizer(self.radii_sizer_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(2, 3, 0, 0)
        self.range_sizer_staticbox.Lower()
        range_sizer = wx.StaticBoxSizer(self.range_sizer_staticbox, wx.HORIZONTAL)
        range_flexgrid_sizer = wx.FlexGridSizer(3, 4, 0, 0)
        self.threshold_sizer_staticbox.Lower()
        threshold_sizer = wx.StaticBoxSizer(self.threshold_sizer_staticbox, wx.VERTICAL)
        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        file_pos_control_panel_sizer = wx.BoxSizer(wx.VERTICAL)
        slider_sizer = wx.BoxSizer(wx.VERTICAL)
        file_pos_sizer = wx.GridSizer(1, 3, 0, 0)
        file_pos_combo_box_sizer = wx.BoxSizer(wx.HORIZONTAL)
        file_pos_sizer.Add(self.file_min_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 1)
        file_pos_combo_box_sizer.Add(self.file_pos_combo_box, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        file_pos_combo_box_sizer.Add(self.file_pos_combo_box_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        file_pos_sizer.Add(file_pos_combo_box_sizer, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        file_pos_sizer.Add(self.file_max_label, 0, wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 1)
        slider_sizer.Add(file_pos_sizer, 1, wx.EXPAND, 0)
        file_pos_control_panel_sizer.Add(slider_sizer, 1, wx.EXPAND, 0)
        file_pos_control_panel_sizer.Add(self.slider, 0, wx.EXPAND, 0)
        self.file_pos_control_panel.SetSizer(file_pos_control_panel_sizer)
        spykeframe_sizer.Add(self.file_pos_control_panel, 0, wx.EXPAND, 1)
        sizer_3.Add(self.globalfixedthresh_radio_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.fixedthresh_spin_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.fixedthresh_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_3.Add(sizer_4, 1, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 1)
        threshold_sizer.Add(sizer_3, 0, 0, 0)
        threshold_sizer.Add((0, 4), 0, 0, 0)
        sizer_5.Add(self.chanfixedthresh_radio_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(self.dynamicthresh_radio_btn, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_6_copy.Add(self.noisemult_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6_copy.Add(self.label_2, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_6_copy.Add(self.noise_method_choice, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_6_copy, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        threshold_sizer.Add(sizer_5, 0, 0, 0)
        sizer_10_copy.Add(self.Vpp_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_10_copy.Add(self.ppthreshmult_text_ctrl, 0, 0, 0)
        sizer_10_copy.Add(self.Vp_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_10_copy.Add(self.dt_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10_copy.Add(self.dt_spin_ctrl, 0, 0, 0)
        sizer_10_copy.Add(self.dt_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        threshold_sizer.Add(sizer_10_copy, 1, wx.EXPAND, 0)
        detect_sizer.Add(threshold_sizer, 0, wx.EXPAND, 0)
        range_flexgrid_sizer.Add(self.range_start_combo_box, 0, 0, 0)
        range_flexgrid_sizer.Add(self.label_5, 1, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        range_flexgrid_sizer.Add(self.range_end_combo_box, 0, 0, 0)
        range_flexgrid_sizer.Add(self.range_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        range_flexgrid_sizer.Add(self.nspikes_label, 0, wx.TOP|wx.ALIGN_CENTER_VERTICAL, 4)
        range_flexgrid_sizer.Add((1, 1), 0, 0, 0)
        range_flexgrid_sizer.Add(self.blocksize_label, 0, wx.TOP|wx.ALIGN_CENTER_VERTICAL, 4)
        range_flexgrid_sizer.Add((1, 1), 0, 0, 0)
        range_flexgrid_sizer.Add(self.nspikes_spin_ctrl, 0, wx.TOP, 4)
        range_flexgrid_sizer.Add((1, 1), 0, 0, 0)
        range_flexgrid_sizer.Add(self.blocksize_combo_box, 0, wx.TOP, 4)
        range_flexgrid_sizer.Add(self.blocksize_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        range_sizer.Add(range_flexgrid_sizer, 0, 0, 0)
        detect_sizer.Add(range_sizer, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.lockout_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.lockr_spin_ctrl, 0, 0, 0)
        grid_sizer_1.Add(self.lockout_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.include_label, 0, 0, 0)
        grid_sizer_1.Add(self.inclr_spin_ctrl, 0, 0, 0)
        grid_sizer_1.Add(self.include_units_label, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 5)
        radii_sizer.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        detect_sizer.Add(radii_sizer, 0, wx.EXPAND, 0)
        sizer_6.Add(detect_sizer, 0, wx.EXPAND, 0)
        sizer_8.Add(self.detect_button, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_8.Add(self.random_sample_checkbox, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_1.Add(self.label_3, 0, wx.ALL, 4)
        sizer_1.Add(self.total_nspikes_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_8.Add(sizer_1, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 0, 0, 0)
        sizer_7.Add(self.detection_list, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        self.detect_pane.SetSizer(sizer_6)
        sizer_14_copy.Add(self.XY_extract_radio_box, 0, 0, 0)
        sizer_14_copy.Add(self.XY_extract_button, 0, 0, 0)
        sizer_9.Add(sizer_14_copy, 0, 0, 0)
        sizer_14.Add(self.wavelet_extract_radio_box, 0, 0, 0)
        sizer_14.Add(self.wavelet_extract_button, 0, 0, 0)
        sizer_9.Add(sizer_14, 0, 0, 0)
        sizer_2.Add(sizer_9, 1, wx.EXPAND, 0)
        self.extract_pane.SetSizer(sizer_2)
        sizer_16.Add(self.add_button, 0, 0, 0)
        sizer_16.Add(self.del_button, 0, 0, 0)
        sizer_16.Add((40, 0), 0, 0, 0)
        sizer_16.Add(self.plot_button, 0, 0, 0)
        sizer_12.Add(sizer_16, 1, 0, 0)
        sizer_17.Add(self.clist, 0, wx.TOP, 3)
        sizer_12.Add(sizer_17, 0, 0, 0)
        sizer_11.Add(sizer_12, 0, 0, 0)
        grid_sizer_3.Add((0, 0), 0, 0, 0)
        grid_sizer_3.Add(self.label_13, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add(self.label_10, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add(self.label_11, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add(self.label_12, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add(self.label_7, 0, wx.ALL, 4)
        grid_sizer_3.Add(self.xdim, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.xpos, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.xori, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.xscale, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.label_8, 0, wx.ALL, 4)
        grid_sizer_3.Add(self.ydim, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.ypos, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.yori, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.yscale, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.label_9, 0, wx.ALL, 4)
        grid_sizer_3.Add(self.zdim, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.zpos, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.zori, 0, wx.ALL, 2)
        grid_sizer_3.Add(self.zscale, 0, wx.ALL, 2)
        grid_sizer_3.Add((0, 0), 0, 0, 0)
        grid_sizer_3.Add(self.apply_cluster_button, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add(self.apply_cluster_button_copy, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 2)
        grid_sizer_3.Add((0, 0), 0, 0, 0)
        grid_sizer_3.Add((0, 0), 0, 0, 0)
        sizer_15.Add(grid_sizer_3, 0, 0, 0)
        self.cluster_params_pane.SetSizer(sizer_15)
        sizer_11.Add(self.cluster_params_pane, 1, wx.EXPAND, 0)
        sizer_13.Add(sizer_11, 1, 0, 0)
        self.cluster_pane.SetSizer(sizer_13)
        self.notebook.AddPage(self.detect_pane, "Detect")
        self.notebook.AddPage(self.extract_pane, "Extract")
        self.notebook.AddPage(self.cluster_pane, "Cluster")
        self.notebook.AddPage(self.validate_pane, "Validate")
        spykeframe_sizer.Add(self.notebook, 1, wx.EXPAND, 0)
        self.SetSizer(spykeframe_sizer)
        self.Layout()
        # end wxGlade

    def OnNew(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnNew' not implemented!"
        event.Skip()

    def OnOpen(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnOpen' not implemented!"
        event.Skip()

    def OnSaveParse(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSaveParse' not implemented!"
        event.Skip()

    def OnSaveResample(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSaveResample' not implemented!"
        event.Skip()

    def OnSave(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSave' not implemented!"
        event.Skip()

    def OnSaveAs(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSaveAs' not implemented!"
        event.Skip()

    def OnSaveWave(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSaveWave' not implemented!"
        event.Skip()

    def OnImportNeurons(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnImportNeurons' not implemented!"
        event.Skip()

    def OnExportSpikes(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnExportSpikes' not implemented!"
        event.Skip()

    def OnExportDIN(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnExportDIN' not implemented!"
        event.Skip()

    def OnExportTextheader(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnExportTextheader' not implemented!"
        event.Skip()

    def OnExportAll(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnExportAll' not implemented!"
        event.Skip()

    def OnClose(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnClose' not implemented!"
        event.Skip()

    def OnExit(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnExit' not implemented!"
        event.Skip()

    def OnSpike(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSpike' not implemented!"
        event.Skip()

    def OnChart(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnChart' not implemented!"
        event.Skip()

    def OnLFP(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnLFP' not implemented!"
        event.Skip()

    def OnSort(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSort' not implemented!"
        event.Skip()

    def OnCluster(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnCluster' not implemented!"
        event.Skip()

    def OnPyShell(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnPyShell' not implemented!"
        event.Skip()

    def OnWaveforms(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnWaveforms' not implemented!"
        event.Skip()

    def OnRasters(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnRasters' not implemented!"
        event.Skip()

    def OnTref(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnTref' not implemented!"
        event.Skip()

    def OnVref(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnVref' not implemented!"
        event.Skip()

    def OnCaret(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnCaret' not implemented!"
        event.Skip()

    def OnSampling(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSampling' not implemented!"
        event.Skip()

    def OnSHCorrect(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnSHCorrect' not implemented!"
        event.Skip()

    def OnAbout(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnAbout' not implemented!"
        event.Skip()

    def OnFilePosComboBox(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnFilePosComboBox' not implemented!"
        event.Skip()

    def OnDetect(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnDetect' not implemented!"
        event.Skip()

    def OnXYExtract(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnXYExtract' not implemented!"
        event.Skip()

    def OnWaveletExtract(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnWaveletExtract' not implemented!"
        event.Skip()

    def OnAddCluster(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnAddCluster' not implemented!"
        event.Skip()

    def OnDelCluster(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnDelCluster' not implemented!"
        event.Skip()

    def OnClusterPlot(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnClusterPlot' not implemented!"
        event.Skip()

    def OnCListSelect(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnCListSelect' not implemented!"
        event.Skip()

    def OnDim(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnDim' not implemented!"
        event.Skip()

    def OnXPos(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnXPos' not implemented!"
        event.Skip()

    def OnXOri(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnXOri' not implemented!"
        event.Skip()

    def OnXScale(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnXScale' not implemented!"
        event.Skip()

    def OnYPos(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnYPos' not implemented!"
        event.Skip()

    def OnYOri(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnYOri' not implemented!"
        event.Skip()

    def OnYScale(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnYScale' not implemented!"
        event.Skip()

    def OnZPos(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnZPos' not implemented!"
        event.Skip()

    def OnZOri(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnZOri' not implemented!"
        event.Skip()

    def OnZScale(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnZScale' not implemented!"
        event.Skip()

    def OnApplyCluster(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnApplyCluster' not implemented!"
        event.Skip()

    def OnApplyAllClusters(self, event): # wxGlade: SpykeFrame.<event_handler>
        print "Event handler `OnApplyAllClusters' not implemented!"
        event.Skip()

# end of class SpykeFrame


class DataFrame(wx.MiniFrame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DataFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FRAME_TOOL_WINDOW|wx.FRAME_NO_TASKBAR|wx.CLIP_CHILDREN
        wx.MiniFrame.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: DataFrame.__set_properties
        self.SetTitle("data window")
        self.SetSize((175, 675))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DataFrame.__do_layout
        dataframe_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.SetSizer(dataframe_sizer)
        self.Layout()
        # end wxGlade

# end of class DataFrame


class SortFrame(wx.MiniFrame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SortFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FRAME_TOOL_WINDOW|wx.FRAME_NO_TASKBAR|wx.CLIP_CHILDREN
        wx.MiniFrame.__init__(self, *args, **kwds)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT|wx.TB_TEXT|wx.TB_NOICONS|wx.TB_HORZ_LAYOUT|wx.TB_HORZ_TEXT)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddLabelTool(wx.ID_ALIGN_MIN, "Align min", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Align neuron's waveforms by their min", "")
        self.toolbar.AddLabelTool(wx.ID_ALIGN_MAX, "Align max", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Align neuron's waveforms by their max", "")
        # Tool Bar end
        self.splitter = wx.SplitterWindow(self, -1, style=wx.SP_3DSASH)
        self.sort_splitter = wx.SplitterWindow(self.splitter, -1, style=wx.SP_3DSASH)
        self.ns_splitter = wx.SplitterWindow(self.sort_splitter, -1, style=wx.SP_NOBORDER)
        self.nlist = NListCtrl(self.ns_splitter, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.NO_BORDER|wx.WANTS_CHARS)
        self.nslist = NSListCtrl(self.ns_splitter, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.NO_BORDER|wx.WANTS_CHARS)
        self.slist = SListCtrl(self.sort_splitter, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.NO_BORDER|wx.WANTS_CHARS)
        self.plot_pane = wx.Panel(self.splitter, -1)
        self.spikesortpanel = SpikeSortPanel(self.plot_pane, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.OnAlignMin, id=wx.ID_ALIGN_MIN)
        self.Bind(wx.EVT_TOOL, self.OnAlignMax, id=wx.ID_ALIGN_MAX)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnNListSelect, self.nlist)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnNListSelect, self.nlist)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.OnNListSelect, self.nlist)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnNSListSelect, self.nslist)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnNSListSelect, self.nslist)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.OnNSListSelect, self.nslist)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnSListSelect, self.slist)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSListSelect, self.slist)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.OnSListSelect, self.slist)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSListColClick, self.slist)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.OnSplitterSashChanged, self.splitter)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SortFrame.__set_properties
        self.SetTitle("sort window")
        self.toolbar.Realize()
        self.spikesortpanel.SetMinSize((160, 670))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SortFrame.__do_layout
        sortframe_sizer = wx.BoxSizer(wx.VERTICAL)
        plot_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.ns_splitter.SplitVertically(self.nlist, self.nslist, 10)
        self.sort_splitter.SplitVertically(self.ns_splitter, self.slist, 3)
        plot_sizer.Add(self.spikesortpanel, 1, wx.EXPAND, 0)
        self.plot_pane.SetSizer(plot_sizer)
        self.splitter.SplitVertically(self.sort_splitter, self.plot_pane, 10)
        sortframe_sizer.Add(self.splitter, 2, wx.EXPAND, 0)
        self.SetSizer(sortframe_sizer)
        sortframe_sizer.Fit(self)
        self.Layout()
        # end wxGlade

    def OnAlignMin(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnAlignMin' not implemented!"
        event.Skip()

    def OnAlignMax(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnAlignMax' not implemented!"
        event.Skip()

    def OnNListSelect(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnNListSelect' not implemented!"
        event.Skip()

    def OnNSListSelect(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnNSListSelect' not implemented!"
        event.Skip()

    def OnSListSelect(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnSListSelect' not implemented!"
        event.Skip()

    def OnSListColClick(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnSListColClick' not implemented!"
        event.Skip()

    def OnSplitterSashChanged(self, event): # wxGlade: SortFrame.<event_handler>
        print "Event handler `OnSplitterSashChanged' not implemented!"
        event.Skip()

# end of class SortFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    spykeframe = SpykeFrame(None, -1, "")
    app.SetTopWindow(spykeframe)
    spykeframe.Show()
    app.MainLoop()
